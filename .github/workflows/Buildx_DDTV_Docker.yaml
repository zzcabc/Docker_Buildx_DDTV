# 利用GitHub Action自动构建多框架的docker镜像
name: Buildx_DDTV_Docker

on:
  # main分支的push操作会触发当前脚本的执行
#  push:
#    branches: [ main ]
  # main分支的pr操作会触发当前脚本的执行
#  pull_request:
#    branches: [ main ]
  # 定时任务,分时日月年,为国际标准时间16点,对应中国时间0点
  # schedule:
  #   - cron: '0 16 * * *'
  # 点击star时开始任务
  watch:
    types: started


jobs:
  Buildx_DDTV_Docker:
    # 运行在Ubuntu系统上
    runs-on: ubuntu-latest
    # 步骤
    steps:
      # 切换到主分支
      - name: Checkout
        uses: actions/checkout@main
      - name: Prepare
        id: prepare
        # IMAGE_NAME ： 镜像名称
        # VERSION ： 源码版本
        # DOCKERHUB_VERSION ： DockerHub 镜像版本
        # TAG_VERSION ： 标签版本
        # TAG_LATEST ： 最新版本
        run: |
          IMAGE_NAME=ddtv
          VERSION=$(curl -sX GET "https://api.github.com/repositories/207967312/releases/latest" | awk '/tag_name/{print $4;exit}' FS='[""]')
          DOCKERHUB_VERSION=$(curl -sX GET "https://hub.docker.com/v2/repositories/zzcabc/ddtv/tags" | awk '{print $294;exit}' FS='[""]')
          TAG_VERSION="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:${VERSION}"
          TAG_LATEST="${{ secrets.DOCKERHUB_USERNAME }}/${IMAGE_NAME}:latest"
          echo ::set-output name=image_name::${IMAGE_NAME}
          echo ::set-output name=github_version::${VERSION}
          echo ::set-output name=dockerhub_version::${DOCKERHUB_VERSION}
          echo ::set-output name=tag_version::${TAG_VERSION}
          echo ::set-output name=tag_latest::${TAG_LATEST}
      - name: Set up QEMU
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/setup-qemu-action@v1

        # 初始化Docker Buildx
      - name: Set up Docker Buildx
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/setup-buildx-action@v1

        # 登录到DockerHub
      - name: Login to DockerHub
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # 构建 Armv7 框架镜像
      - name: Build linux/arm/v7
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm/v7
          push: true
          build-args: ${{ steps.prepare.outputs.github_version }}
          tags: ${{ steps.prepare.outputs.tag_version }}-arm32v7,${{ steps.prepare.outputs.tag_latest }}-arm32v7
      # 构建 Armv8 框架镜像
      - name: Build linux/arm/v8
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          push: true
          build-args: ${{ steps.prepare.outputs.github_version }}
          tags: ${{ steps.prepare.outputs.tag_version }}-arm64v8,${{ steps.prepare.outputs.tag_latest }}-arm64v8
      # 构建 Amd64 框架镜像
      - name: Build linux/amd64
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          build-args: ${{ steps.prepare.outputs.github_version }}
          tags: ${{ steps.prepare.outputs.tag_version }}-amd64,${{ steps.prepare.outputs.tag_latest }}-amd64   
        #创建并推送多架构镜像
      - name: Create and push manifest lists
        if: ${{ steps.prepare.outputs.dockerhub_version != steps.prepare.outputs.github_version }}
        run: |
          docker manifest create -a ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-arm32v7 \
              ${{ steps.prepare.outputs.tag_version }}-arm64v8 \
              ${{ steps.prepare.outputs.tag_version }}-amd64 \
            
          docker manifest annotate ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-arm32v7 \
              --arch=arm \
              --os=linux  \
              --variant=v7 \
              --os-version=mcr.microsoft.com/dotnet/aspnet:5.0-alpine

          docker manifest annotate ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-arm64v8 \
              --arch=arm64 \
              --os=linux  \
              --variant=v8 \
              --os-version=mcr.microsoft.com/dotnet/aspnet:5.0-alpine

          docker manifest annotate ${{ steps.prepare.outputs.tag_version }} \
              ${{ steps.prepare.outputs.tag_version }}-amd64 \
              --arch=amd64 \
              --os=linux  \
              --os-version=mcr.microsoft.com/dotnet/aspnet:5.0-alpine

          docker manifest push ${{ steps.prepare.outputs.tag_version }}
          
          docker manifest create -a ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-arm32v7 \
              ${{ steps.prepare.outputs.tag_latest }}-arm64v8 \
              ${{ steps.prepare.outputs.tag_latest }}-amd64

          docker manifest annotate ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-arm32v7 \
              --arch=arm \
              --os=linux  \
              --variant=v7 \
              --os-version=mcr.microsoft.com/dotnet/aspnet:5.0-alpine

          docker manifest annotate ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-arm64v8 \
              --arch=arm64 \
              --os=linux  \
              --variant=v8 \
              --os-version=mcr.microsoft.com/dotnet/aspnet:5.0-alpine

          docker manifest annotate ${{ steps.prepare.outputs.tag_latest }} \
              ${{ steps.prepare.outputs.tag_latest }}-amd64 \
              --arch=amd64 \
              --os=linux  \
              --os-version=mcr.microsoft.com/dotnet/aspnet:5.0-alpine

          docker manifest push ${{ steps.prepare.outputs.tag_latest }}
